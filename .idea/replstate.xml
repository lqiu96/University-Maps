<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1452286882118">{:repl-history {:ide [], :local [&quot;(def tweet \&quot;Il 2016 comincia con la #Nemirovsky, non solo #Adelphi ma edizione numerata di #Via del vento\&quot;)&quot; &quot;tweet&quot; &quot;(clojure.string/replace tweet #\&quot;,\&quot; \&quot; \&quot;)&quot; &quot;(clojure.string/replace tweet #\&quot;,\&quot; \&quot;\&quot;)&quot; &quot;(clojure.string/replace tweet #\&quot;,.?!\&quot; \&quot;\&quot;)&quot; &quot;(clojure.string/replace tweet #\&quot;[,.?!]\&quot; \&quot;\&quot;)&quot; &quot;(doc apply)&quot; &quot;(apply println [1 2 3])&quot; &quot;(apply + [1 2 3])&quot; &quot;(defn print-out\n  [x]\n  (println x))&quot; &quot;(apply print-out [1 2 3])&quot; &quot;(do\n  (map println [1 2 3])\n  (map println [4 5 6]))&quot; &quot;(do\n  (map println [1 2 3]))&quot; &quot;(do\n  (map println [1 2 3])\n  (map println [1]))&quot; &quot;({:m \&quot;Hi\&quot;} {:d \&quot;Bye\&quot;})&quot; &quot;(def x ({:m \&quot;Hi\&quot;} {:d \&quot;Bye\&quot;}))&quot; &quot;(def x ''({:m \&quot;Hi\&quot;} {:d \&quot;Bye\&quot;}))&quot; &quot;(def x '({:m \&quot;Hi\&quot;} {:d \&quot;Bye\&quot;}))\n&quot; &quot;(map vals x)&quot; &quot;(flatten (map vals x))&quot; &quot;(def x \&quot;Hi\\nFive\&quot;)&quot; &quot;(def x \&quot;Hi.\\nFive\&quot;)&quot; &quot;(println x)&quot; &quot;(clojure.string/replace x #\&quot;[.\\n]\&quot; \&quot;\&quot;)&quot; &quot;(defn test1\n  []\n  (println \&quot;Hello\&quot;))&quot; &quot;(defn test2\n  []\n  (println \&quot;Bye\&quot;))&quot; &quot;(do\n  (test1)\n  (test2))&quot; &quot;(do\n  (println (+ 1 2))\n  (println (+ 1 3)))&quot; &quot;(def test {:a \&quot;a\&quot; :b \&quot;b\&quot;})&quot; &quot;test&quot; &quot;(doseq [map test]\n  (do\n    (println (key map))\n    (println (val map))))&quot; &quot;(clojure.string/replace \&quot;.\&quot; nil)&quot; &quot;(clojure.string/replace \&quot;Tell\&quot;  \&quot;.\&quot; nil)&quot; &quot;(clojure.string/replace nil  \&quot;.\&quot; \&quot;\&quot;)&quot; &quot;(def x 5)&quot; &quot;x&quot; &quot;(defn test-main\n  [&amp; args]\n  (println (str (first args) \&quot; \&quot; (second args) \&quot; \&quot; (nth args 3))))&quot; &quot;(test-main \&quot;First\&quot; \&quot;Second\&quot; \&quot;3rd\&quot;)&quot; &quot;(defn test-main\n  [&amp; args]\n  (println (str (first args) \&quot; \&quot; (second args) \&quot; \&quot; (nth args 2))))&quot; &quot;(test-main \&quot;1\&quot; \&quot;2\&quot; \&quot;3\&quot;)&quot; &quot;(doseq [x [1 2 3]]\n  (println x)\n  (println x))&quot; &quot;(doseq [x [ 1 2 3]]\n  (do\n    (println x)\n    (println x)))&quot; &quot;(defn variable-param\n  [&amp; params]\n  (println params))&quot; &quot;(variable-param 1 2 3 4 5)&quot; &quot;(type (variable-param 1 2 3 4 5))&quot; &quot;(println (type (variable-param 1 2 3 4)))&quot; &quot;(str Date.)&quot; &quot;(def date (java.util.Date.))&quot; &quot;date&quot; &quot;(println date)&quot; &quot;(println (str date))&quot; &quot;(.format (java.text.SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) date)&quot; &quot;;(.format (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) (Date.))&quot; &quot;(type (.format (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) (Date.)))&quot; &quot;(Date.)&quot; &quot;(.currentTimeMillis (System.))&quot; &quot;(.currentTimeMillis)&quot; &quot;(System.)&quot; &quot;(System/currentTimeMillis)&quot; &quot;(Date. (- 1452202531855 (* 1000 60 60 24)))&quot; &quot;(.format (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) ((Date. (- 1452202531855 (* 1000 60 60 24)))))&quot; &quot;(.format (SimpleDateFormat. \&quot;yyyy-MM-dd\&quot;) (Date.))&quot; &quot;(Date. (- 1452202531855 (* 7 1000 60 60 24)))&quot; &quot;(take 10 (iterate #(- % 2) 100))&quot; &quot;(LocalDate/now)&quot; &quot;(take 7 (iterate #(.minusDays % 1) LocalDate/now))&quot; &quot;(take 7 (iterate #(.minusDays % 1) (LocalDate/now)))\n&quot; &quot;(doseq [x [1 2 3]]\n  (doseq [y [4 5 6]]\n    (println x)\n    (println y)))&quot; &quot;(defn get-list\n  []\n  '(1 2 3))&quot; &quot;(def x [1 2 3])&quot; &quot;(defn get-list\n  [x]\n  '(1 2 3))&quot; &quot;(map get-list x)&quot; &quot;(defn write-list\n  [list]\n  (doseq [data list]\n    (println data)))&quot; &quot;(def x [[1 2 3] [4 5 6] [7 8 9]])&quot; &quot;(doseq [data x]\n  (write-list data))&quot; &quot;(doseq [first-value x]\n  (doseq [second-value first-value]\n    (println second-value)))&quot; &quot;(def x '(\&quot;1\&quot; \&quot;2\&quot;))&quot; &quot;(doseq [line x]\n  (let [line1 (clojure.string/replace line #\&quot;1\&quot; \&quot;10\&quot;)]\n    (println line1)))&quot; &quot;(defn random-function\n  [x]\n  (if true\n    (do\n      (println \&quot;hi\&quot;)\n      x)))&quot; &quot;(random-function 5)&quot;], :remote []}}</component>
</project>